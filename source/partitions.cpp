#include <algorithm>

#include "partitions.hpp"

std::vector<std::vector<std::vector<int>>> partitions(std::vector<int> v)
{
    if (v.size() == 0)
        return std::vector<std::vector<std::vector<int>>>();
    
    std::vector<std::vector<std::vector<int>>> partitions;
    partitions = {{ {{ {v[0]} }} }};
    for (int i=1; i<v.size(); ++i) {

        auto prev_partitions = partitions;

        partitions = std::vector<std::vector<std::vector<int>>>();
        for (auto prev_partition : prev_partitions) {

            // new partition in form of {prev_partition, {v[i]}}
            partitions.push_back(prev_partition);
            partitions[partitions.size()-1].push_back({{ {v[i]} }});

            // new partitions generated by addition v[i] to each prior subset
            for (int j=0; j<prev_partition.size(); ++j) {
                partitions.push_back(prev_partition);
                partitions[partitions.size()-1][j].push_back(v[i]);
            }
        }
    }
    
//    for (auto &partition : partitions) {
//        std::sort(
//            partition.begin(),
//            partition.end(),
//            [](std::vector<int> i, std::vector<int> j) {
//                return i.size() > j.size();
//            });
//    }

    std::sort(
        partitions.begin(),
        partitions.end(),
        [](std::vector<std::vector<int>> i, std::vector<std::vector<int>> j) {
            return i.size() < j.size();
        });

    return partitions;
}
